{"version":3,"sources":["main.js"],"names":["app","BrowserWindow","shell","ipcMain","require","url","path","dialog","Store","fs","chokidar","win","watcher","store","defaults","windowBounds","width","height","x","y","fontDirectories","activePath","getPath","disabledPath","fontOrder","active","disabled","fontPreview","size","color","appPrefs","dividers","extensions","createWindow","get","saveWindowBounds","set","getBounds","show","titleBarStyle","minWidth","minHeight","backgroundColor","icon","join","__dirname","setSheetOffset","loadURL","format","pathname","protocol","slashes","once","on","checkPaths","close","watchOnce","quit","chooseFolder","message","currentPath","label","capitalize","showOpenDialog","defaultPath","buttonLabel","properties","filename","webContents","send","exportFonts","fonts","showSaveDialog","undefined","error","i","length","copySync","err","console","log","word","charAt","toUpperCase","slice","folder","response","capitalized","details","existsSync","showErrorBox","showMessageBox","detail","buttons","watch","ignored","ignoreInitial","persistent","depth","event","setTimeout","openExternal","installPath","location","list","file","split","pop","moveSync","overwrite"],"mappings":"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","file":"../main.min.js","sourcesContent":["'use strict'\n\nconst {app, BrowserWindow, shell, ipcMain} = require('electron')\nconst url = require('url') \nconst path = require('path')\nconst dialog = require('electron').dialog\nconst Store = require('electron-store')\nconst fs = require( 'fs-extra' )\nconst chokidar = require( 'chokidar' )\n\nlet win,\n\twatcher,\n\tstore = new Store({\n\tdefaults: {\n\t\t\n\t\twindowBounds: {\n\t\t\twidth: 800,\n\t\t\theight: 600,\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\t\n\t\tfontDirectories: {\n\t\t\tactivePath: app.getPath('home') + '/Library/Fonts/',\n\t\t\tdisabledPath: app.getPath('home') + '/Library/Fonts Disabled/'\n\t\t},\n\t\t\n\t\tfontOrder: {\n\t\t\tactive: 0,\n\t\t\tdisabled: 0\t\n\t\t},\n\t\t\n\t\tfontPreview: {\n\t\t\tsize: 8,\n\t\t\tcolor: '#000000'\n\t\t},\n\t\t\n\t\tappPrefs: {\n\t\t\tdividers: false,\n\t\t\textensions: true\n\t\t}\n\t}\n})\n\n\n\nfunction createWindow() {\n\t\n\tlet { x, y, width, height } = store.get('windowBounds')\n\t\n\twin = new BrowserWindow({\n\t\tshow: false,\n\t\ttitleBarStyle: 'hidden',\n\t\tx: x,\n\t\ty: y,\n\t\twidth: width,\n\t\theight: height,\n\t\tminWidth: 400,\n\t\tminHeight: 300,\n\t\tbackgroundColor: '#031320',\n\t\ticon: path.join(__dirname, '../assets/icon/Icon.icns')\n\t})\n\t\n\twin.setSheetOffset(24)\n\t\n\tfunction saveWindowBounds() {\n\t\tstore.set('windowBounds', win.getBounds())\n\t}\n\t\n\twin.loadURL(url.format ({ \n\t\t\n\t\tpathname: path.join(__dirname, '../html/app.html'), \n\t\tprotocol: 'file:', \n\t\tslashes: true \n\t}))\n\t\n\twin.once('ready-to-show', win.show)\n\t\n\twin.on('show', () => {\n\t\t\n\t\tcheckPaths( 'active' )\n\t\tcheckPaths( 'disabled' )\n\t})\n\t\n\twin.on('resize', saveWindowBounds)\n\twin.on('move', saveWindowBounds)\n\t\n\twin.on('focus', () => {\n\t\t\n\t\tif( typeof watcher != 'undefined' ) watcher.close()\n\t})\n\t\n\twin.on('blur', watchOnce)\n\twin.on('closed', app.quit)\n\t\n\trequire('./app-menu.min')\n\trequire('./list-menus.min')\n\trequire('./font-menu.min')\n\trequire('./glyph-menu.min')\n\trequire('./install-font.min')\n}\n\napp.on('ready', createWindow)\n\n\n\napp.on('open-folder', (message) => {\n\t\n\tshell.openExternal('file://' + store.get(`fontDirectories.${message}Path` ))\n})\n\n\n\napp.on('choose-folder', (message) => {\n\t\n\tchooseFolder( message )\n})\n\n\n\nfunction chooseFolder(message) {\n\t\n\tlet currentPath = store.get('fontDirectories.' + `${message}Path` ),\n\tlabel = capitalize( message )\n\t\n\tdialog.showOpenDialog(win, {\n\t\t\t\n\t\t\tdefaultPath: currentPath,\n\t\t\tbuttonLabel: 'Choose ' + label + ' Fonts Folder',\n\t\t\tproperties: [\t'openDirectory',\n\t\t\t\t\t\t\t'showHiddenFiles',\n\t\t\t\t\t\t\t'createDirectory'\n\t\t\t\t\t\t]\n\t\t},\t\t\n\t\t\n\t\tsetFontDirectories\n\t)\n\t\n\t\n\tfunction setFontDirectories(filename) {\n\t\t\n\t\tif( filename ) {\n\t\t\t\n\t\t\tstore.set('fontDirectories.' + `${message}Path`, filename[0] + '/')\n\t\t\twin.webContents.send('update-path')\n\t\t}\n\t}\n}\n\n\n\napp.on('export-single', (message) => { exportFonts( [message] ) })\nipcMain.on('export-list', (event, message) => { exportFonts( message) })\n\n\n\nipcMain.on('set-prefs', (event, message) => {\n\t\n\twin.webContents.send('reload')\n})\n\n\n\nfunction exportFonts(fonts) {\n\t\n\tdialog.showSaveDialog(win, {\n\t\t\t\n\t\t\tdefaultPath: app.getPath('desktop') + '/Exported Fonts',\n\t\t\tbuttonLabel: 'Export Fonts'\n\t\t},\t\t\n\t\t\n\t\texportList\n\t)\n\t\n\tfunction exportList( filename ) {\n\t\t\n\t\tif ( filename === undefined ) {\n\t\t\t\n\t\t\treturn\n\t\t\n\t\t} else {\n\t\t\t\n\t\t\tlet error = 0\n\t\t\t\n\t\t\tfor( let i = 0, length = fonts.length; i < length; i++ ) {\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\t\n\t\t\t\t\tfs.copySync( fonts[i][1], filename + '/' + fonts[i][0] )\n\t\t\t\t\t\n\t\t\t\t} catch (err) {\n\t\t\t\t\t\n\t\t\t\t\terror++\n\t\t\t\t\tconsole.log( err )\t\n\t\t\t\t\n\t\t\t\t} finally {\n\t\t\t\t\t\n\t\t\t\t\tif( i+1 == length ) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tif( error > 1 ) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\twin.webContents.send('export-failed')\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\twin.webContents.send('export-ok', filename)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t}\n\t}\n}\n\n\n\nipcMain.on('import', (event, message) => {\n\t\n\tlet installPath = ( message.location == 'left-panel' )? store.get('fontDirectories.activePath') : store.get('fontDirectories.disabledPath')\n\t\n\tlet error = 0\n\t\n\tfor( let i = 0, length = message.list.length; i < length; i++ ) {\n\t\t\n\t\tlet file = message.list[i].split('/').pop()\n\t\t\n\t\ttry {\n\t\t\t\n\t\t\tfs.moveSync(message.list[i], installPath + file, { overwrite: true })\n\t\t\n\t\t} catch (err) {\n\t\t\t\n\t\t\terror++\n\t\t\tconsole.log( err )\n\t\t\t\n\t\t} finally {\n\t\t\t\n\t\t\tif( i+1 == length ) {\n\t\t\t\t\n\t\t\t\tif( error > 1 ) {\n\t\t\t\t\t\n\t\t\t\t\twin.webContents.send('import-failed')\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\twin.webContents.send('import-ok', installPath)\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\t}\n})\n\n\n\nfunction capitalize( word ) {\n\t\n\treturn word.charAt(0).toUpperCase() + word.slice(1)\n}\n\n\n\nfunction checkPaths( folder ) {\n\t\n\tlet capitalized = capitalize( folder ),\n\t\tmessage \t= `The ${capitalized} Folder is not yet set.`,\n\t\tresponse\n\t\n\tlet details = (folder === 'disabled') ? \n\t\t`Please choose or create a folder to store disabled fonts in:` :\n\t\t`Please set it to: ${app.getPath('home')}/Library/Fonts/`\n\t\t\n\t\n\tif( !fs.existsSync( store.get(`fontDirectories.${folder}Path`) ) ) {\n\t\t\n\t\tswitch ( folder ) {\n\t\t\t\n\t\t\tcase 'active':\n\t\t\t\t\n\t\t\t\tresponse = dialog.showErrorBox( message, details )\n\t\t\t\t\n\t\t\t\tstore.set( 'fontDirectories.activePath', `${app.getPath('home')}/Library/Fonts/` )\n\t\t\t\t\n\t\t\t\twin.webContents.send('update-path')\n\t\t\t\t\n\t\t\tbreak\n\t\t\t\n\t\t\tcase 'disabled':\n\t\t\t\t\n\t\t\t\tresponse = dialog.showMessageBox({\t\n\t\t\t\t\t\t\tmessage: message,\n\t\t\t\t\t\t\tdetail: details,\n\t\t\t\t\t\t\tbuttons: [`Choose ${capitalized} Fonts Folder`,'Cancel']\n\t\t\t\t\t\t})\n\t\t\t\t\n\t\t\t\tif( response === 0 ) chooseFolder( `${folder}`)\n\t\t\t\n\t\t\tbreak\n\t\t}\n\t}\n}\n\n\n\nfunction watchOnce() {\n\t\n\twatcher = chokidar.watch(\n\t\t[\n\t\t\tstore.get('fontDirectories.activePath'),\n\t\t\tstore.get('fontDirectories.disabledPath')\n\t\t],\n\t\t{\n\t\t\tignored: /(^|[\\/\\\\])\\../,\n\t\t\tignoreInitial: true,\n\t\t\tpersistent: true,\n\t\t\tdepth: 0\n\t\t}\n\t).on('all', (event, path) => {\n\t\t\n\t\twatcher.close()\t\t\n\t\t\n\t\tfunction reloadApp() {\n\t\t\t\n\t\t\twin.webContents.send('reload')\n\t\t}\n\t\t\n\t\tsetTimeout(reloadApp, 1000)\n\t\tsetTimeout(watchOnce, 1000)\t\t\t\n\t})\n}\n"]}